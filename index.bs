<pre class='metadata'>
Title: did:web Decentralized Identifier Method Specification
Boilerplate: issues-index no, copyright no, abstract no
Shortname: did-web-spec
Level: 1
Status: w3c/ED
Group: Credentials Community Group
URL: https://github.com/w3c-ccg/did-method-web
Repository: https://github.com/w3c-ccg/did-method-web
Max ToC Depth: 2
Editor: Oliver Terbu, Consensys https://consensys.net, oliver.terbu@consensys.net
Editor: Dmitri Zagidulin, dzagidulin@gmail.com
Editor: Amy Guy, amy@rhiaro.co.uk
!Authors: Oliver Terbu, Consensys https://consensys.net, oliver.terbu@consensys.net
!Authors: Mike Xu, Consensys https://consensys.net, mike.xu@consensy.net
Abstract: DIDs that target a distributed ledger face significant practical challenges in bootstrapping enough meaningful trusted data around identities to incentivize mass adoption. We propose using a new DID method in conjunction with blockchain-based DIDs that allows them to bootstrap trust using a web domain's existing reputation.
</pre>

## Copyright
<p class="copyright">
<a href="https://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a>
Â© 2019 the Contributors to the DID Web Method Specification, published by the
<a href="https://www.w3.org/community/credentials/">Credentials Community
Group</a> under the <a href="https://www.w3.org/community/about/agreements/cla/">W3C Community Contributor License Agreement (CLA)</a>.
A human-readable <a href="https://www.w3.org/community/about/agreements/cla-deed/">summary</a>
is available.
</p>

# `did:web` Method Specification

## Preface

The Web DID method specification conforms to the requirements specified in the
[DID specification](https://w3c-ccg.github.io/did-spec/), currently published by
the W3C Credentials Community Group. For more information about DIDs and DID
method specifications, please see the [DID
Primer](https://github.com/WebOfTrustInfo/rebooting-the-web-of-trust-fall2017/blob/master/topics-and-advance-readings/did-primer.md)

## Abstract

DIDs that target a distributed ledger face significant practical challenges in
bootstrapping enough meaningful trusted data around identities to incentivize
mass adoption. We propose using a new DID method in conjunction with
blockchain-based DIDs that allows them to bootstrap trust using a web domain's
existing reputation.

## Example

Issue: Add non-ethereum example keys (ed25519, RSA, etc)

```json
{
  "@context": "https://w3id.org/did/v1",
  "id": "did:web:example.com",
  "publicKey": [{
       "id": "did:web:example.com#owner",
       "type": "Secp256k1VerificationKey2018",
       "owner": "did:web:example.com",
       "ethereumAddress": "0xb9c5714089478a327f09197987f16f9e5d936e8a"
  }],
  "authentication": [{
       "type": "Secp256k1SignatureAuthentication2018",
       "publicKey": "did:web:example.com#owner"
  }]
}
```

## Target System

Issue: Explain the difference from / relationship with the [Decentralized Identifier in DNS](https://tools.ietf.org/html/draft-mayrhofer-did-dns-01) spec

The target system of the Web DID method is the web host that the domain name
described by the DID resolves to when queried through the Domain Name System
(DNS).

## DID Method Name

The namestring that shall identify this DID method is: `web`

A DID that uses this method MUST begin with the following prefix: `did:web`. Per
the DID specification, this string MUST be in lowercase. The remainder of the
DID, after the prefix, is specified below.

## Method Specific Identifier

The method specific identifier is a fully qualified domain name that is secured
by a TLS/SSL certificate with an optional path to the DID document. The
formal rules describing valid domain name syntax are described in
[RFC 1035](https://tools.ietf.org/html/rfc1035),
[RFC 1123](https://tools.ietf.org/html/rfc1123), and
[RFC 2181](https://tools.ietf.org/html/rfc2181).

The method specific identifier must match the common name used in the SSL/TLS
certificate, and it must not include IP addresses or port numbers. Directories
and subdirectories may optionally be included, delimited by colons rather
than slashes.

	web-did = "did:web:" domain-name

    web-did = "did:web:" domain-name * (":" path)

### Examples

```
did:web:w3c-ccg.github.io
```

```
did:web:w3c-ccg.github.io:user:alice
```

## JSON-LD Context Definition

Issue: Add example usage of non-secp keys (ed25519, RSA, etc)

Note this DID example uses the `Secp256k1VerificationKey2018`, `Secp256k1SignatureAuthentication2018`
types and an `ethereumAddress` instead of a `publicKeyHex`.

The definition of the Web DID JSON-LD context is:

    {
        "@context":
        {
            "ethereumAddress": "https://github.com/uport-project/ethr-did-resolver#ethereumAddress",
            "Secp256k1VerificationKey2018": "https://github.com/uport-project/ethr-did-resolver#Secp256k1VerificationKey2018",
            "Secp256k1SignatureAuthentication2018": "https://github.com/uport-project/ethr-did-resolver#Secp256k1VerificationKey2018",
        }
    }

## CRUD Operation Definitions

### Create (Register)

Creating a DID is done by
1. applying at a domain name registrar for use of a domain name and
1. storing the location of a hosting service, the IP address at a DNS lookup
    service
1. creating the DID document JSON-LD file including a suitable keypair, e.g.,
    using the Koblitz Curve, and storing the `did.json` file under the well-known
    URL to represent the entire domain, or under the specified path if many DIDs
    will be resolved in this domain.

For the domain name `w3c-ccg.github.io`, the `did.json` will be available under
the following URL:

```
did:web:w3c-ccg.github.io
```

```
https://w3c-ccg.github.io/.well-known/did.json
```

If an optional path is specified rather the bare domain, the `did.json`
will be available under the specified path:

```
did:web:w3c-ccg.github.io:user:alice
```

```
https://w3c-ccg.github.io/user/alice/did.json
```

### Read (Resolve)

The following steps must be executed to resolve the DID document from a Web DID:

1. Replace ":" with "/" in the method specific identifier to obtain the fully
    qualified domain name and optional path.
2. Generate an HTTPS URL to the expected location of the DID document by
    prepending `https://`.
3. If no path has been specified in the URL, append `/.well-known`.
4. Append `/did.json` to complete the URL.
5. Perform an HTTP `GET` request to the URL using an agent that can
    successfully negotiate a secure HTTPS connection, which enforces the security
    requirements as described in
    [Security Considerations](Security-Considerations).

Issue: The read mechanism does not provide any sort of auditability on the DID, which leaves this DID Method open to insider-threat attacks, among others.

Issue: Reads enable pervasive tracking of DID use across the Internet. There is currently no mitigation for this privacy-violating mechanism.

### Update

To update the DID document, the `did.json`has to be updated. Please note that
the DID will remain the same, but the contents of the DID document could change,
e.g., by including a new verification key or adding service endpoints.

Issue: This DID method does not specify any authentication or authorization mechanism for writing to the DID Document, leaving it up to implementations to protect from modification by an attacker.

Note: There is no HTTP API specified for the update process leaving programmatic registrations and management to be defined by each implementation.

### Delete (Revoke)

To delete the DID document, the `did.json`has to be removed or has to be no
longer publicly available due to any other means.

## Security and Privacy Considerations

### DNS Considerations

Issue: Add warning - all resolutions of a did:web identifier using DNS are centrally logged, enabling pervasive tracking mechanisms.

Issue: Add discussion of DNSCrypt and DNS Security Extensions (DNSSEC) and similar methods as possible mitigation tools.

### DID Document Integrity Verification

Issue: Add discussion of using <a href="https://tools.ietf.org/html/draft-sporny-hashlink">Hashlinks</a> to aid integrity protection and verification of the DID document.

### In-transit Security

At least TLS 1.2 should be configured to use only strong ciphers suites and to
use sufficiently large key sizes. As recommendations may be volatile these days,
only the very latest recommendations should be used. However, as a rule of
thumb, the following must be used:

- Ephemeral keys are to be used.
- ECDHE with one of the strong curves {X25519, brainpoolP384r1, NIST P-384,
    brainpoolP256r1, NIST P-256} shall be used as key exchange.
- AESGCM or ChaCha20 with 256 bit large keys shall be used for bulk encryption
- ECDSA with one of the strong curves {brainpoolP384r1, NIST P-384,
    brainpoolP256r1, NIST P-256} or RSA (at least 3072) shall be used.
- Authenticated Encryption with Associated Data (AEAD) shall be used as Mac.
- At least SHA256 shall be used, but SHA384 or POLY1305 are recommended.

Examples of strong SSL/TLS configurations for now are:

- `ECDHE-ECDSA-AES256-GCM-SHA384, TLSv1.2, Kx=ECDH, Au=ECDSA, Enc=AESGCM(256), Mac=AEAD`
- `ECDHE-RSA-AES256-GCM-SHA384, TLSv1.2, Kx=ECDH, Au=RSA Enc=AESGCM(256), Mac=AEAD`
- `ECDHE-ECDSA-CHACHA20-POLY1305, TLSv1.2, Kx=ECDH, Au=ECDSA, Enc=ChaCha20-Poly1305, Mac=AEAD`
- `ECDHE-RSA-CHACHA20-POLY1305, TLSv1.2, Kx=ECDH, Au=RSA, Enc=ChaCha20-Poly1305, Mac=AEAD`
- `ECDHE-RSA-AES256-GCM-SHA384, TLSv1.2, Kx=ECDH, Au=RSA, Enc=AESGCM(256), Mac=AEAD`
- `ECDHE-ECDSA-AES256-GCM-SHA384, TLSv1.2, Kx=ECDH, Au=ECDSA, Enc=AESGCM(256), Mac=AEAD`

It is recommended to adhere to
[OWASP's](https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet)
latest recommendations for hardening TLS configurations.

Delete action can be performed by domain name registrars or DNS lookup services.

### Optional Path Considerations

When optional paths to DID documents are used to resolve documents rather than
bare domains, verification with signed data proves that the entity in control of
the file indicated in the path has the private keys. It does not prove that the
domain operator has the private keys.

This example:

```
did:web:example.com:u:bob
```

resolves to the DID document at:

```
https://example.com/u/bob/did.json
```

In this scenario, it is probable that example.com has given user Bob control
over the DID in question, and proofs of control refer to Bob rather than all
of example.com.


## Reference Implementations

The code at
[https://github.com/uport-project/https-did-resolver](https://github.com/uport-project/https-did-resolver)
is intended to present a reference implementation of this DID method. Any other
implementations should ensure that they pass the test suite described in
`/src/__tests__` before claiming compatibility.
